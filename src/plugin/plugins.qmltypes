import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.nemomobile.models 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "BaseFilterModel"
        prototype: "QAbstractListModel"
        Property { name: "sourceModel"; type: "QObject"; isPointer: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "getRole"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "getRole"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "getRoles"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
    }
    Component {
        name: "CompositeModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.models/CompositeModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "models"; type: "QList<QObject*>" }
    }
    Component {
        name: "FilterModel"
        prototype: "BaseFilterModel"
        exports: ["org.nemomobile.models/FilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterRequirement"
            values: {
                "PassAllFilters": 0,
                "PassAnyFilter": 1
            }
        }
        Property { name: "filters"; type: "QVariantList" }
        Property { name: "filterRequirement"; type: "FilterRequirement" }
    }
    Component {
        name: "ObjectListModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.models/ObjectListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "automaticRoles"; type: "bool" }
        Property { name: "populated"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "itemAdded"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "insertItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "appendItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeItemAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "SearchModel"
        prototype: "BaseFilterModel"
        exports: ["org.nemomobile.models/SearchModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MatchType"
            values: {
                "MatchBeginning": 0,
                "MatchAnywhere": 1
            }
        }
        Property { name: "searchRoles"; type: "QStringList" }
        Property { name: "searchProperties"; type: "QStringList" }
        Property { name: "pattern"; type: "string" }
        Property { name: "caseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "matchType"; type: "MatchType" }
    }
    Component {
        name: "SortFilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["org.nemomobile.models/SortFilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "filterRegExp"; type: "string" }
        Property { name: "filterString"; revision: 1; type: "string" }
        Property { name: "filterCallback"; revision: 1; type: "QJSValue" }
        Property { name: "filterRole"; type: "string" }
        Property { name: "sortRole"; type: "string" }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Property { name: "sortColumn"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "sourceModelChanged"
            Parameter { type: "QObject"; isPointer: true }
        }
        Signal {
            name: "filterRegExpChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "filterStringChanged"
            revision: 1
            Parameter { type: "string" }
        }
        Signal {
            name: "filterCallbackChanged"
            revision: 1
            Parameter { type: "QJSValue" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "mapRowToSource"
            type: "int"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "mapRowFromSource"
            type: "int"
            Parameter { name: "i"; type: "int" }
        }
    }
}
